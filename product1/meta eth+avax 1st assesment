// SPDX-License-Identifier: MIT
pragma solidity ^0.8.8;

contract ethAvax {
    address private owner;
    uint public balance;
    constructor () {
        owner = msg.sender;
        balance = 0;
    }
    function deposit(uint _amount) public {
    // Require that the sender is the owner
      require (msg.sender == owner , "only the owner can deposit");
      
     // Assert that the balance is not overflowing
      assert(balance + _amount >= balance);
      balance += _amount;
}

function withdraw(uint _amount) public  {
// Require that the sender is the owner
    require (msg.sender == owner , "only the owner can deposit");
    
   // Check if the balance is sufficient
      if (balance < _amount) {
      
      // Revert the transaction if the balance is insufficient
        revert ("insufficient balance");
      }
      balance -= _amount;

}

function getBalance() public view returns (uint) {
    return balance;
}
}
